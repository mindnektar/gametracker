type Mutation {
    createGame(input: CreateGameInput!): Game!
    updateGame(input: UpdateGameInput!): Game!
    fetchGameData(input: FetchGameDataInput!): FetchGameDataResult!
}

type Game {
    id: ID!
    system: System!
    compilation: Compilation
    developer: Developer!
    genres: [Genre!]!
    dlcs: [Dlc!]!
    title: String!
    rating: Int!
    release: Int!
    description: String!
    youTubeId: String!
    status: GameStatus!
}

enum GameStatus {
    active
    planned
    completed
    dropped
}

input CreateGameInput {
    title: String!
    rating: Int!
    release: Int!
    description: String!
    youTubeId: String!
    lists: [RelateInput!]!
    system: RelateSystemInput!
    developer: RelateDeveloperInput!
    genres: [RelateGenreInput!]!
    compilation: RelateCompilationInput
    dlcs: [CreateDlcInput!]
    status: GameStatus!
}

input UpdateGameInput {
    id: ID!
    title: String
    rating: Int
    release: Int
    description: String
    youTubeId: String
    lists: [RelateInput!]
    system: RelateSystemInput
    developer: RelateDeveloperInput
    genres: [RelateGenreInput!]
    compilation: RelateCompilationInput
    dlcs: [CreateDlcInput!]
    status: GameStatus
}

input FetchGameDataInput {
    title: String!
    system: String!
}

type FetchGameDataResult {
    developer: String
    genres: [String!]
    release: Int
    description: String
    youTubeId: String
}
